@page "/medico/medico"
@using AppCapasCitas.DTO.Request.Reporte
@using AppCapasCitas.DTO.Response.Identity
@using AppCapasCitas.Transversal.Common.Identity
@using Blazored.Toast.Configuration
@using AppCapasCitas.FrontEnd.Components.Modals
@using AppCapasCitas.FrontEnd.Components
@using Microsoft.AspNetCore.Components
@inject NavigationManager navigationManager
@inject IMedicoProxy proxy
@inject IReporteProxy proxyReportes
@inject IToastService toastService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject SweetAlertService Swal;
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@inject AuthenticationStateProvider auth
@using Microsoft.AspNetCore.Components.Web

<PageTitle>Medicos</PageTitle>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-6">
                <h3>Lista de médicos</h3>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="row mb-3">            
            <div class="col-md-8">
                <div class="input-group">
                    <span class="input-group-text">Estado:</span>
                    <select class="form-select" @bind="isActive" @bind:after="BuscarMedicos">
                        <option value="">Todos</option>
                        <option value="true">Activos</option>
                        <option value="false">Inactivos</option>
                    </select>
                    <span class="input-group-text">Parámetro:</span>
                    <input type="text" class="form-control" placeholder="Buscar..." @bind="searchText" />
                    <button class="btn btn-outline-secondary" @onclick="BuscarMedicos">Filtrar
                        <i class="bi bi-search"></i>
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="LimpiarFiltros">
                        <i class="bi bi-x-circle-fill"></i> Limpiar
                    </button>
                </div>
            </div>
            <div class="col-md-4 text-end">
                <div class="btn-group" role="group">
                    <button class="btn btn-outline-secondary" @onclick="ExportarPDF">
                        <i class="bi bi-filetype-pdf"></i> Exportar Lista
                    </button>
                    <button class="btn btn-primary" 
                            @onclick="GenerarExpedientesSeleccionados" 
                            disabled="@(!MedicosSeleccionados.Any())"
                            title="Generar expedientes de médicos seleccionados">
                        <i class="bi bi-file-earmark-pdf"></i>
                        Expediente(s) (@MedicosSeleccionados.Count)
                    </button>
                </div>
            </div>           
        </div>

        <!-- Botones de selección múltiple -->
        @if (listaMedicos.Any() && !cargando)
        {
            <div class="row mb-3">
                <div class="col-md-12">
                    <div class="btn-group btn-group-sm" role="group">
                        <button class="btn btn-outline-info" @onclick="SeleccionarTodos">
                            <i class="bi bi-check-square"></i> Seleccionar Todos
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="LimpiarSeleccion">
                            <i class="bi bi-square"></i> Limpiar Selección
                        </button>
                        <button class="btn btn-outline-warning" @onclick="SeleccionarSoloPagina">
                            <i class="bi bi-check-square"></i> Solo Esta Página
                        </button>
                    </div>
                    @if (MedicosSeleccionados.Any())
                    {
                        <span class="badge bg-primary ms-2">@MedicosSeleccionados.Count médico(s) seleccionado(s)</span>
                    }
                </div>
            </div>
        }

        <Loading mostrar="@cargando"/>

        @if (!listaMedicos.Any() && !cargando)
        {
            <div class="alert alert-info">No se encontraron médicos</div>
        }
        else if (!cargando)
        {
            <div class="table-responsive">
                <table class="table table-striped table-bordered table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th style="width: 40px;">
                                <input type="checkbox" 
                                       @onchange="@((args) => ToggleSeleccionTodos(args))" 
                                       checked="@TodosSeleccionados"
                                       title="Seleccionar/Deseleccionar todos" />
                            </th>
                            <th>Nombre</th>
                            <th>Apellido</th>
                            <th>Email</th>
                            <th>Teléfono</th>
                            <th>Celular</th>
                            <th>Dirección</th>
                            <th>Ciudad</th>
                            <th>Estado</th>
                            <th>País</th>
                            <th>Activo</th>
                            <th>Último Login</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var medico in listaMedicos)
                        {
                            @if (medico == null) continue;
                            <tr class="@(MedicosSeleccionados.Contains(medico.UsuarioResponse!.UsuarioId.ToString()) ? "table-info" : "")">
                                <td>
                                    <input type="checkbox" 
                                           @onchange="@((args) => ToggleSeleccionMedico(medico.UsuarioResponse!.UsuarioId.ToString(), args))"
                                           checked="@MedicosSeleccionados.Contains(medico.UsuarioResponse!.UsuarioId.ToString())" />
                                </td>
                                <td>@medico!.UsuarioResponse!.Nombre</td>
                                <td>@medico.UsuarioResponse.Apellido</td>
                                <td>@medico.UsuarioResponse.Email</td>
                                <td>@medico.UsuarioResponse.Telefono</td>
                                <td>@medico.UsuarioResponse.Celular</td>
                                <td>@medico.UsuarioResponse.Direccion</td>
                                <td>@medico.UsuarioResponse.Ciudad</td>
                                <td>@medico.UsuarioResponse.Estado</td>
                                <td>@medico.UsuarioResponse.Pais</td>
                                <td>
                                    @if (medico.UsuarioResponse.Activo)
                                    {
                                        <span class="badge bg-success">Sí</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">No</span>
                                    }
                                </td>
                                <td>
                                    @(medico.UsuarioResponse.UltimoLogin?.ToString("dd/MM/yyyy HH:mm") ?? "-")
                                </td>
                                <td>
                                    <div class="btn-group btn-group-sm" role="group">
                                        <button class="btn btn-outline-warning" 
                                                @onclick="() => EditarMedico(medico.UsuarioResponse.UsuarioId.ToString())"
                                                title="Editar médico">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                        <button class="btn btn-outline-danger" 
                                                @onclick="() => ExportarExpedienteByIdPDF(medico.UsuarioResponse.UsuarioId.ToString())"
                                                title="Generar expediente individual">
                                            <i class="bi bi-file-earmark-pdf"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <select class="form-select w-auto d-inline-block" 
                            @bind="pageSize" 
                            @bind:after="OnPageSizeChanged">
                        <option value="1">1 por página</option>
                        <option value="5">5 por página</option>
                        <option value="10">10 por página</option>
                        <option value="20">20 por página</option>
                        <option value="50">50 por página</option>
                    </select>
                    <span class="ms-2">
                        Mostrando @((pageNumber - 1) * pageSize + 1) a @Math.Min(pageNumber * pageSize, listaMedicos.Count()) de @totalCount registros
                    </span>
                </div>
                <div class="col-md-6 mt-3">
                    <nav class="float-end">
                        <ul class="pagination">
                            <li class="page-item @(!hasPreviousPages? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(1)">
                                    <i class="bi bi-chevron-double-left"></i>
                                </button>
                            </li>
                            <li class="page-item @(!hasPreviousPages ? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(pageNumber - 1)">
                                    <i class="bi bi-chevron-left"></i>
                                </button>
                            </li>
                            
                            @for (int i = Math.Max(1, pageNumber - 2); i <= Math.Min(totalPages, pageNumber + 2); i++)
                            {
                                int currentPage = i;
                                <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                    <button class="page-link" @onclick="async () => await ChangePage(currentPage)">@i</button>
                                </li>
                            }
                            
                            <li class="page-item @(!hasNextPages ? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(pageNumber + 1)">
                                    <i class="bi bi-chevron-right"></i>
                                </button>
                            </li>
                            <li class="page-item @(!hasNextPages ? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(totalPages)">
                                    <i class="bi bi-chevron-double-right"></i>
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private List<MedicoResponse> listaMedicos = new();
    public bool cargando { get; set; } = false;
    public string? isActive { get; set; }
    private string searchText = "";
    private string sort = "";
    private AuthResponse? usuarioActual = null;

    // Paginación
    private int pageNumber;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalCount = 0;
    private bool hasPreviousPages = false;
    private bool hasNextPages = false;

    // Selección múltiple
    private List<string> MedicosSeleccionados = new();
    private bool TodosSeleccionados => listaMedicos.Any() && 
        listaMedicos.All(m => MedicosSeleccionados.Contains(m.UsuarioResponse!.UsuarioId.ToString()));

    protected override async Task OnInitializedAsync()
    {
        var authService = (AuthenticationService)auth;
        usuarioActual = await authService.GetUserActual();
        await CargarMedicos();
    }

    private async Task OnPageSizeChanged()
    {
        pageNumber = 1;
        await CargarMedicos();
    }

    private async Task LimpiarFiltros()
    {
        searchText = string.Empty;
        isActive = null;
        pageNumber = 1;
        LimpiarSeleccion(); // Limpiar selección al filtrar
        await CargarMedicos();
    }

    private void Regresar()
    {
        navigationManager.NavigateTo("/medico/medico");
    }

    private async Task CargarMedicos()
    {
        cargando = true;
        StateHasChanged();
        try
        {
            pageNumber = Math.Max(1, pageNumber);
            var resultPagination = await proxy.ObtenerPaginationMedicosAsync(sort, pageNumber, pageSize, searchText, isActive);
            if (resultPagination.IsSuccess)
            {
                var dataOrdenado = resultPagination.Data?.ToList() ?? new List<MedicoResponse>();
                pageNumber = resultPagination.PageNumber;
                pageSize = resultPagination.PageSize;
                totalPages = resultPagination.TotalPages;
                hasPreviousPages = resultPagination.HasPreviousPages;
                hasNextPages = resultPagination.HasNextPages;
                listaMedicos = dataOrdenado!;
                totalCount = resultPagination.TotalCount;
                
                // Mantener selecciones válidas después de recargar
                MedicosSeleccionados = MedicosSeleccionados
                    .Where(id => listaMedicos.Any(m => m.UsuarioResponse!.UsuarioId.ToString() == id))
                    .ToList();
            }
            else
            {
                listaMedicos.Clear();
                toastService.ShowWarning("No hay usuarios con esos parámetros", settings => settings.Position = ToastPosition.BottomRight);
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error al cargar usuarios: {ex.Message}");
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private async Task BuscarMedicos()
    {
        pageNumber = 1;
        await CargarMedicos();
    }

    private async Task ChangePage(int page)
    {
        if (cargando) return;
        cargando = true;
        try
        {
            pageNumber = page;
            await CargarMedicos();
        }
        finally
        {
            cargando = false;
        }
    }

    #region Métodos de Selección Múltiple

    private void ToggleSeleccionMedico(string medicoId, ChangeEventArgs args)
    {
        var isChecked = (bool)(args.Value ?? false);
        
        if (isChecked && !MedicosSeleccionados.Contains(medicoId))
        {
            MedicosSeleccionados.Add(medicoId);
        }
        else if (!isChecked && MedicosSeleccionados.Contains(medicoId))
        {
            MedicosSeleccionados.Remove(medicoId);
        }
        
        StateHasChanged();
    }

    private async Task ToggleSeleccionTodos(ChangeEventArgs args)
    {
        var isChecked = (bool)(args.Value ?? false);
        
        if (isChecked)
        {
            await SeleccionarTodos();
        }
        else
        {
            LimpiarSeleccion();
        }
    }

    private async Task SeleccionarTodos()
    {
        try
        {
            cargando = true;
            toastService.ShowInfo("Obteniendo todos los médicos...");
            
            // Obtener todos los médicos sin paginación
            var resultTodos = await proxy.ObtenerPaginationMedicosAsync(sort, 1, int.MaxValue, searchText, isActive);
            if (resultTodos.IsSuccess && resultTodos.Data != null)
            {
                MedicosSeleccionados = resultTodos.Data
                    .Select(m => m.UsuarioResponse!.UsuarioId.ToString())
                    .ToList();
                
                toastService.ShowSuccess($"Se seleccionaron {MedicosSeleccionados.Count} médicos");
            }
            else
            {
                toastService.ShowError("Error al obtener la lista completa de médicos");
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error al seleccionar todos: {ex.Message}");
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private void SeleccionarSoloPagina()
    {
        var medicosEnPagina = listaMedicos
            .Select(m => m.UsuarioResponse!.UsuarioId.ToString())
            .ToList();
            
        foreach (var medicoId in medicosEnPagina)
        {
            if (!MedicosSeleccionados.Contains(medicoId))
            {
                MedicosSeleccionados.Add(medicoId);
            }
        }
        
        StateHasChanged();
        toastService.ShowInfo($"Se seleccionaron {medicosEnPagina.Count} médicos de esta página");
    }

    private void LimpiarSeleccion()
    {
        MedicosSeleccionados.Clear();
        StateHasChanged();
    }

    #endregion

    #region Métodos de Generación de Reportes

    private async Task GenerarExpedientesSeleccionados()
    {
        if (!MedicosSeleccionados.Any())
        {
            toastService.ShowWarning("Debe seleccionar al menos un médico");
            return;
        }

        try
        {
            cargando = true;
            var cantidadSeleccionados = MedicosSeleccionados.Count;
            
            SweetAlertResult confirmResult = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmar Generación",
                Text = $"¿Desea generar {cantidadSeleccionados} expediente(s) de médico(s)?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, generar",
                CancelButtonText = "Cancelar"
            });

            if (string.IsNullOrEmpty(confirmResult.Value))
            {
                return;
            }

            toastService.ShowInfo($"Generando {cantidadSeleccionados} expediente(s)... Esto puede tomar unos momentos.");

            // Llamar al método del proxy para generar múltiples expedientes
            var response = await proxyReportes.GenerarExpedientesMedicosMultiplesAsync(MedicosSeleccionados);

            if (response?.IsSuccess == true && response.Data != null)
            {
                await DescargarArchivo(response.Data.FileContent, response.Data.FileName, response.Data.ContentType);
                toastService.ShowSuccess($"Se generaron {cantidadSeleccionados} expediente(s) exitosamente");
                LimpiarSeleccion();
            }
            else
            {
                toastService.ShowError("Error al generar expedientes: " + (response?.Message ?? "Error desconocido"));
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error al generar expedientes: {ex.Message}");
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task EditarMedico(string usuarioId)
    {
        cargando = true;
        SweetAlertResult resultSwal = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = $"¿Desea entrar a la edición del médico?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí",
            CancelButtonText = "No"
        });   
        
        if (!string.IsNullOrEmpty(resultSwal.Value))
        {
            if (string.IsNullOrEmpty(usuarioId))
            {
                toastService.ShowError("ID de usuario no válido.");
                return;
            }
            navigationManager.NavigateTo($"/medico/EditarMedico/{usuarioId}");
        }
        cargando = false;
    }

    private async Task ExportarPDF()
    {
        cargando = true;
        try
        {
            toastService.ShowInfo("Exportando datos a PDF...");
            var request = new ReporteRequest
            {
                FiltroNombre = searchText
            };
            var response = await proxyReportes.GenerarReporteMedicosPersonalizadoAsync(request);
            if (response == null || !response.IsSuccess)
            {
                toastService.ShowError("Error al generar el reporte: " + response?.Message);
                return;
            }

            await DescargarArchivo(response.Data!.FileContent, response.Data.FileName, response.Data.ContentType);
            toastService.ShowSuccess("Datos exportados correctamente");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error al exportar: {ex.Message}");
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task ExportarExpedienteByIdPDF(string medicoId)
    {
        cargando = true;
        try
        {
            toastService.ShowInfo("Generando expediente individual...");
 
            var response = await proxyReportes.GenerarReporteMedicoByIdAsync(medicoId);
            if (response == null || !response.IsSuccess)
            {
                toastService.ShowError("Error al generar el expediente: " + response?.Message);
                return;
            }

            await DescargarArchivo(response.Data!.FileContent, response.Data.FileName, response.Data.ContentType);
            toastService.ShowSuccess("Expediente generado correctamente");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error al generar expediente: {ex.Message}");
        }
        finally
        {
            cargando = false;
        }
    }

    private async Task DescargarArchivo(byte[] fileBytes, string fileName, string contentType)
    {
        var base64 = Convert.ToBase64String(fileBytes);
        await JSRuntime.InvokeVoidAsync("downloadFile", base64, fileName, contentType);
    }

    #endregion
}