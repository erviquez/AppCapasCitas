@page "/medico/medico"
@using AppCapasCitas.DTO.Response.Identity
@using AppCapasCitas.Transversal.Common.Identity
@using Blazored.Toast.Configuration
@using AppCapasCitas.FrontEnd.Components.Modals
@using AppCapasCitas.FrontEnd.Components
@using Microsoft.AspNetCore.Components
@inject NavigationManager navigationManager
@inject IMedicoProxy proxy
@inject IToastService toastService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject SweetAlertService Swal;
@attribute [Authorize]
@inject AuthenticationStateProvider auth
@using Microsoft.AspNetCore.Components.Web

<PageTitle>Medicos</PageTitle>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-6">
                <h3>Lista de médicos</h3>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="row mb-3">            
            <div class="col-md-10">
                <div class="input-group">
                    <span class="input-group-text">Estado:</span>
                    <select class="form-select" @bind="isActive" @bind:after="BuscarMedicos">
                        <option value="">Todos</option>
                        <option value="true">Activos</option>
                        <option value="false">Inactivos</option>
                    </select>
                    <span class="input-group-text">Parámetro:</span>
                    <input type="text" class="form-control" placeholder="Buscar..." @bind="searchText" />
                    <button class="btn btn-outline-secondary" @onclick="BuscarMedicos">Filtrar
                        <i class="bi bi-search"></i>
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="LimpiarFiltros">
                        <i class="bi bi-x-circle-fill"></i> Limpiar
                    </button>
                </div>
            </div>
            

        </div>

        <Loading mostrar="@cargando"/>

        @if (!listaMedicos.Any() && !cargando)
        {
            <div class="alert alert-info">No se encontraron médicos</div>
        }
        else if (!cargando)
        {
            <div class="table-responsive">
                <table class="table table-striped table-bordered table-hover">
                    <thead class="table-dark">
                        <tr>    
                            <th>Nombre</th>
                            <th>Apellido</th>
                            <th>Email</th>
                            <th>Teléfono</th>
                            <th>Celular</th>
                            <th>Dirección</th>
                            <th>Ciudad</th>
                            <th>Estado</th>
                            <th>País</th>
                            <th>Activo</th>
                            <th>Último Login</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var usuario in listaMedicos)
                        {
                            @if (usuario == null) continue;
                            <tr>
                                <td>@usuario.Nombre</td>
                                <td>@usuario.Apellido</td>
                                <td>@usuario.Email</td>
                                <td>@usuario.Telefono</td>
                                <td>@usuario.Celular</td>
                                <td>@usuario.Direccion</td>
                                <td>@usuario.Ciudad</td>
                                <td>@usuario.Estado</td>
                                <td>@usuario.Pais</td>
                                <td>
                                    @if (usuario.Activo)
                                    {
                                        <span class="badge bg-success">Sí</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">No</span>
                                    }
                                </td>
                                <td>
                                    @(usuario.UltimoLogin?.ToString("dd/MM/yyyy HH:mm") ?? "-")
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-danger ms-1" @onclick="() => EditarMedico(usuario.MedicoId.ToString())">
                                            <i class="bi-pencil-square"></i>
                                    </button>

                                    @* @if (usuario.Activo)
                                    {
                                        <button class="btn btn-sm btn-outline-danger ms-1" @onclick="() => DesactivarUsuario(usuario)">
                                            <i class="bi bi-power"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-outline-success ms-1" @onclick="() => DesactivarUsuario(usuario)">
                                            <i class="bi bi-check2-square"></i>
                                        </button>
                                    } *@
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <select class="form-select w-auto d-inline-block" 
                            @bind="pageSize" 
                            @bind:after="OnPageSizeChanged">
                        <option value="1">1 por página</option>
                        <option value="5">5 por página</option>
                        <option value="10">10 por página</option>
                        <option value="20">20 por página</option>
                        <option value="50">50 por página</option>
                    </select>
                    <span class="ms-2">
                        Mostrando @((pageNumber - 1) * pageSize + 1) a @Math.Min(pageNumber * pageSize, listaMedicos.Count()) de @totalCount registros
                    </span>
                </div>
                <div class="col-md-6 mt-3">
                    <nav class="float-end">
                        <ul class="pagination">
                            <li class="page-item @(!hasPreviousPages? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(1)">
                                    <i class="bi bi-chevron-double-left"></i>
                                </button>
                            </li>
                            <li class="page-item @(!hasPreviousPages ? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(pageNumber - 1)">
                                    <i class="bi bi-chevron-left"></i>
                                </button>
                            </li>
                            
                            @for (int i = Math.Max(1, pageNumber - 2); i <= Math.Min(totalPages, pageNumber + 2); i++)
                            {
                                int currentPage = i;
                                <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                    <button class="page-link" @onclick="async () => await ChangePage(currentPage)">@i</button>
                                   
                                </li>
                            }

                            
                            <li class="page-item @(!hasNextPages ? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(pageNumber + 1)">
                                    <i class="bi bi-chevron-right"></i>
                                </button>
                            </li>
                            <li class="page-item @(!hasNextPages ? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(totalPages)">
                                    <i class="bi bi-chevron-double-right"></i>
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        }
    </div>
</div>


@code {
    private List<MedicoResponse> listaMedicos = new();
    //public List<Role> listaRoles = new();
    //public UsuarioConvertRequest usuarioConvertModel = new();
    //private bool mostrarModalAsignarRol = false;
    public bool cargando { get; set; } = false;
    public string? isActive { get; set; }
    private string searchText = "";
    private string sort = "";
    private AuthResponse? usuarioActual = null;

    // Paginación
    private int pageNumber;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalCount = 0;
    private bool hasPreviousPages = false;
    private bool hasNextPages = false;

    protected override async Task OnInitializedAsync()
    {
        var authService = (AuthenticationService)auth;
        usuarioActual = await authService.GetUserActual();
        await CargarMedicos();

    }
    private async Task OnPageSizeChanged()
    {
        pageNumber = 1;
        await CargarMedicos();
    }

    private async Task LimpiarFiltros()
    {
        searchText = string.Empty;
        isActive = null;
        pageNumber = 1;
        await CargarMedicos();
    }

    private void Regresar()
    {
        navigationManager.NavigateTo("/medico/medico");
    }

    private async Task CargarMedicos()
    {
        cargando = true;
        StateHasChanged();
        try
        {
            pageNumber = Math.Max(1, pageNumber);
            var resultPagination = await proxy.ObtenerPaginationMedicosAsync(sort, pageNumber, pageSize, searchText, isActive);
            if (resultPagination.IsSuccess)
            {
                var dataOrdenado = resultPagination.Data?.ToList() ?? new List<MedicoResponse>();
                pageNumber = resultPagination.PageNumber;
                pageSize = resultPagination.PageSize;
                totalPages = resultPagination.TotalPages;
                hasPreviousPages = resultPagination.HasPreviousPages;
                hasNextPages = resultPagination.HasNextPages;
                listaMedicos = dataOrdenado!;
                totalCount = resultPagination.TotalCount;
            }
            else
            {
                listaMedicos.Clear();
                toastService.ShowWarning("No hay usuarios con esos parámetros", settings => settings.Position = ToastPosition.BottomRight);
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error al cargar usuarios: {ex.Message}");
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private async Task BuscarMedicos()
    {
        pageNumber = 1;
        await CargarMedicos();
    }

    private async Task ChangePage(int page)
    {
        if (cargando) return;
        cargando = true;
        try
        {
            pageNumber = page;
            await CargarMedicos();
        }
        finally
        {
            cargando = false;
        }
    }
        private async Task EditarMedico(string usuarioId)
    {
        cargando = true;
        SweetAlertResult resultSwal = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = $"¿Desea entrar a la edición del medico ?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Si",
            CancelButtonText = "No"
        });   
        if (!string.IsNullOrEmpty(resultSwal.Value))
        {
            if (string.IsNullOrEmpty(usuarioId))
            {
                toastService.ShowError("ID de usuario no válido.");
                return;
            }
            navigationManager.NavigateTo($"/medico/EditarMedico/{usuarioId}");
        }
        cargando = false;

    }
}