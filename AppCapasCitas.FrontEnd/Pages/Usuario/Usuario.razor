@page "/usuario/usuario"
@attribute [Authorize]
@inject NavigationManager navigationManager
@inject IUsuarioProxy proxy
@using Blazored.Toast.Configuration
@inject IToastService toastService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject SweetAlertService Swal;

<PageTitle>Usuarios</PageTitle>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-6">
                <h3>Lista de Usuarios</h3>
            </div>
            <div class="col-md-6 text-end">
                <button class="btn btn-primary" @onclick="NuevoUsuario">
                    <i class="bi bi-person-fill-add"></i> Nuevo Usuario
                </button>
            </div>
        </div>
    </div>

    <div class="card-body">
        <div class="row mb-3">            
            <div class="col-md-10">
                <div class="input-group">
                    <span class="input-group-text">Estado:</span>
                    <select class="form-select" @bind="isActive" @bind:after="BuscarUsuarios">
                        <option value="">Todos</option>
                        <option value="true">Activos</option>
                        <option value="false">Inactivos</option>
                    </select>

                    <span class="input-group-text">Parámetro:</span>

                    <input type="text" class="form-control" placeholder="Buscar..." @bind="searchText" />
                    <button class="btn btn-outline-secondary" @onclick="BuscarUsuarios">Filtrar
                        <i class="bi bi-search"></i>
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="LimpiarFiltros">
                        <i class="bi bi-x-circle-fill"></i> Limpiar
                    </button>
                </div>
            </div>
            
            <div class="col-md-2 text-end">
                <button class="btn btn-outline-secondary" @onclick="ExportarExcel">
                    <i class="bi bi-file-spreadsheet-fill"></i> Exportar
                </button>
            </div>
        </div>

        <Loading mostrar="@cargando"/>

        @if (!listaUsuario.Any() && !cargando)
        {
            <div class="alert alert-info">No se encontraron usuarios</div>
        }
        else if (!cargando)
        {
            <div class="table-responsive">
                <table class="table table-striped table-bordered table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Nombre</th>
                            <th>Apellido</th>
                            <th>Email</th>
                            <th>Teléfono</th>
                            <th>Celular</th>
                            <th>Dirección</th>
                            <th>Ciudad</th>
                            <th>Estado</th>
                            <th>País</th>
                            <th>Activo</th>
                            <th>Último Login</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var usuario in listaUsuario)
                        {
                            @if (usuario == null) continue;
                            <tr>
                                <td>@usuario.Nombre</td>
                                <td>@usuario.Apellido</td>
                                <td>@usuario.Email</td>
                                <td>@usuario.Telefono</td>
                                <td>@usuario.Celular</td>
                                <td>@usuario.Direccion</td>
                                <td>@usuario.Ciudad</td>
                                <td>@usuario.Estado</td>
                                <td>@usuario.Pais</td>
                                <td>
                                    @if (usuario.Activo)
                                    {
                                        <span class="badge bg-success">Sí</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">No</span>
                                    }
                                </td>
                                <td>
                                    @(usuario.UltimoLogin?.ToString("dd/MM/yyyy HH:mm") ?? "-")
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-info" @onclick="() => EditarUsuario(usuario)" data-bs-toggle="modal" data-bs-target="#exampleModal" >
                                        <i class="bi bi-pencil-square"></i>
                                    </button>
                                        @if (usuario.Activo)
                                        {
                                            <button class="btn btn-sm btn-outline-danger ms-1" @onclick="() => DesactivarUsuario(usuario)">
                                                <i class="bi bi-power"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-sm btn-outline-success ms-1" @onclick="() => DesactivarUsuario(usuario)">
                                                <i class="bi bi-check2-square"></i>
                                            </button>
                                        }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <select class="form-select w-auto d-inline-block" 
                            @bind="pageSize" 
                            @bind:after="OnPageSizeChanged">
                        <option value="1">1 por página</option>
                        <option value="5">5 por página</option>
                        <option value="10">10 por página</option>
                        <option value="20">20 por página</option>
                        <option value="50">50 por página</option>
                    </select>
                    <span class="ms-2">
                        Mostrando @((pageNumber - 1) * pageSize + 1) a @Math.Min(pageNumber * pageSize, listaUsuario.Count()) de @totalCount registros
                    </span>
                </div>
                <div class="col-md-6 mt-3">
                    <nav class="float-end">
                        <ul class="pagination">
                            <li class="page-item @(!hasPreviousPages? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(1)">
                                    <i class="bi bi-chevron-double-left"></i>
                                </button>
                            </li>
                            <li class="page-item @(!hasPreviousPages ? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(pageNumber - 1)">
                                    <i class="bi bi-chevron-left"></i>
                                </button>
                            </li>
                            
                            @for (int i = Math.Max(1, pageNumber - 2); i <= Math.Min(totalPages, pageNumber + 2); i++)
                            {
                                int currentPage = i;
                                <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                    <button class="page-link" @onclick="async () => await ChangePage(currentPage)">@i</button>
                                   
                                </li>
                            }

                            
                            <li class="page-item @(!hasNextPages ? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(pageNumber + 1)">
                                    <i class="bi bi-chevron-right"></i>
                                </button>
                            </li>
                            <li class="page-item @(!hasNextPages ? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(totalPages)">
                                    <i class="bi bi-chevron-double-right"></i>
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        }
    </div>
</div>

@* Inicia modal *@
@* <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" data-bs-whatever="@mdo">Open modal for @mdo</button>
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" data-bs-whatever="@fat">Open modal for @fat</button>
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" data-bs-whatever="@getbootstrap">Open modal for @getbootstrap</button> *@

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">New message</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form>
          <div class="mb-3">
            <label for="recipient-name" class="col-form-label">Recipient:</label>
            <input type="text" class="form-control" id="recipient-name">
          </div>
          <div class="mb-3">
            <label for="message-text" class="col-form-label">Message:</label>
            <textarea class="form-control" id="message-text"></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Send message</button>
      </div>
    </div>
  </div>
</div>

@* Termina modal *@
@code {
    private List<UsuarioResponse> listaUsuario = new();
    public bool cargando { get; set; } = false;
    public string? isActive { get; set; } 
    private string searchText = "";
    private string sort = "";
    
    // Paginación
    private int pageNumber  ;
    private int pageSize = 5 ;
    private int totalPages = 1 ;
    private int totalCount = 0;
    private bool hasPreviousPages  =false;
    private bool hasNextPages  =false;
    protected override async Task OnInitializedAsync()
    {
        await CargarUsuarios();
    }
    private async Task OnPageSizeChanged()
    {
        pageNumber = 1; // Reinicia a la primera página
        await CargarUsuarios(); // Vuelve a cargar los datos
    }
    private async Task LimpiarFiltros()
    {
        searchText = string.Empty;
        isActive = null;
        pageNumber = 1;
        await CargarUsuarios();
    }

    private async Task CargarUsuarios()
    {
        cargando = true;
        StateHasChanged();

        try
        {
            // Ensure pageNumber is within valid range
            pageNumber = Math.Max(1, pageNumber);
            
            var resultPagination = await proxy.ObtenerPaginationUsuariosAsync(sort, pageNumber, pageSize, searchText, isActive);

            if (resultPagination.IsSuccess)
            {
                pageNumber = resultPagination.PageNumber;
                pageSize = resultPagination.PageSize;
                totalPages = resultPagination.TotalPages;
                hasPreviousPages = resultPagination.HasPreviousPages;
                hasNextPages = resultPagination.HasNextPages;
                listaUsuario = resultPagination.Data!;
                totalCount = resultPagination.TotalCount;
            }
            else
            {
                listaUsuario.Clear();
                toastService.ShowWarning("No hay usuarios con esos parámetros", settings => settings.Position = ToastPosition.BottomRight);
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error al cargar usuarios: {ex.Message}");
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }


    private async Task BuscarUsuarios()
    {
        pageNumber = 1;
        await CargarUsuarios();
    }

    private async Task ChangePage(int page)
    {
        if (cargando) return;
        
        cargando = true;
        try
        {
            pageNumber = page;
            await CargarUsuarios();
        }
        finally
        {
            cargando = false;
        }
    }

    private void NuevoUsuario()
    {
        navigationManager.NavigateTo("/usuario/nuevo");
    }

    private void EditarUsuario(UsuarioResponse usuario)
    {
        //navigationManager.NavigateTo($"/usuario/editar/{usuario.IdentityId}");
    }

    private async Task DesactivarUsuario(UsuarioResponse usuario)
    {
        string estado = usuario.Activo ? "desactivar" : "activar";
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions{
            Title = "Confirmación",
            Text = $"¿Está seguro que desea {estado} al usuario {usuario.Nombre} {usuario.Apellido}?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Si",
            CancelButtonText = "No"
        });
        if (!string.IsNullOrEmpty(result.Value))
        {
            cargando = true;
            StateHasChanged();
            try
            {
                var usuarioRequest = new UsuarioRequest
                {
                    UserId = usuario.IdentityId ?? Guid.Empty,
                    IsActive = !usuario.Activo
                };
                var response = await proxy.DisableUsuarioByIdAsync(usuarioRequest);
                if (!response.IsSuccess)
                {
                    toastService.ShowError($"Error al {estado} usuario: {response.Message}");
                }
                else
                {
                    toastService.ShowSuccess($"Éxito al {estado} usuario {usuario.Nombre} {usuario.Apellido}");                
                    await CargarUsuarios();
                }
            }
            finally 
            {
                cargando = false;
                StateHasChanged();
            }
          
            

        }

    }

    private async Task ExportarExcel()
    {
        cargando = true;
        try
        {
            // Implementar lógica de exportación a Excel
            toastService.ShowInfo("Exportando datos a Excel...");
            // Aquí iría el código para generar el Excel
            await Task.Delay(1000); // Simular proceso
            toastService.ShowSuccess("Datos exportados correctamente");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error al exportar: {ex.Message}");
        }
        finally
        {
            cargando = false;
        }
    }
}
