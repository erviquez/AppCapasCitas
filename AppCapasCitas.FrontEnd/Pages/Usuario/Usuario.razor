@page "/usuario/usuario"
@using AppCapasCitas.DTO.Response.Identity
@using AppCapasCitas.Transversal.Common.Identity
@using Blazored.Toast.Configuration
@using AppCapasCitas.FrontEnd.Components.Modals
@using AppCapasCitas.FrontEnd.Components
@using Microsoft.AspNetCore.Components
@inject NavigationManager navigationManager
@inject IUsuarioProxy proxy
@inject IToastService toastService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject SweetAlertService Swal;
@attribute [Authorize]
@inject AuthenticationStateProvider auth
@using Microsoft.AspNetCore.Components.Web
<PageTitle>Usuarios</PageTitle>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-md-6">
                <h3>Lista de Usuarios</h3>
            </div>
            <div class="col-md-6 text-end">
                <button class="btn btn-primary" @onclick="NuevoUsuario">
                    <i class="bi bi-person-fill-add"></i> Nuevo Usuario
                </button>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div class="row mb-3">            
            <div class="col-md-10">
                <div class="input-group">
                    <span class="input-group-text">Estado:</span>
                    <select class="form-select" @bind="isActive" @bind:after="BuscarUsuarios">
                        <option value="">Todos</option>
                        <option value="true">Activos</option>
                        <option value="false">Inactivos</option>
                    </select>

                    <span class="input-group-text">Parámetro:</span>

                    <input type="text" class="form-control" placeholder="Buscar..." @bind="searchText" />
                    <button class="btn btn-outline-secondary" @onclick="BuscarUsuarios">Filtrar
                        <i class="bi bi-search"></i>
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="LimpiarFiltros">
                        <i class="bi bi-x-circle-fill"></i> Limpiar
                    </button>
                </div>
            </div>
            
            <div class="col-md-2 text-end">
                <button class="btn btn-outline-secondary" @onclick="ExportarExcel">
                    <i class="bi bi-file-spreadsheet-fill"></i> Exportar
                </button>
            </div>
        </div>

        <Loading mostrar="@cargando"/>

        @if (!listaUsuario.Any() && !cargando)
        {
            <div class="alert alert-info">No se encontraron usuarios</div>
        }
        else if (!cargando)
        {
            <div class="table-responsive">
                <table class="table table-striped table-bordered table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Tipo Usuario</th>
                            <th>Nombre</th>
                            <th>Apellido</th>
                            <th>Email</th>
                            <th>Teléfono</th>
                            <th>Celular</th>
                            <th>Dirección</th>
                            <th>Ciudad</th>
                            <th>Estado</th>
                            <th>País</th>
                            <th>Activo</th>
                            <th>Último Login</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var usuario in listaUsuario)
                        {
                            @if (usuario == null) continue;
                            <tr>
                                <td>
                                    @if (usuario.RoleName != null)
                                    {
                                        @usuario.RoleName
                                    }
                                    else
                                    {
                                        <span class="text-muted">Sin rol asignado</span>
                                    }
                                </td>
                                <td>@usuario.Nombre</td>
                                <td>@usuario.Apellido</td>
                                <td>@usuario.Email</td>
                                <td>@usuario.Telefono</td>
                                <td>@usuario.Celular</td>
                                <td>@usuario.Direccion</td>
                                <td>@usuario.Ciudad</td>
                                <td>@usuario.Estado</td>
                                <td>@usuario.Pais</td>
                                <td>
                                    @if (usuario.Activo)
                                    {
                                        <span class="badge bg-success">Sí</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">No</span>
                                    }
                                </td>
                                <td>
                                    @(usuario.UltimoLogin?.ToString("dd/MM/yyyy HH:mm") ?? "-")
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-danger ms-1" @onclick="() => EditarUsuario(usuario.UsuarioId.ToString())">
                                            <i class="bi-pencil-square"></i>
                                    </button>
                                    
                                    @if( usuario.RoleName != null && (usuario.RoleName.ToLower() != "medico" && usuario.RoleName.ToLower() != "paciente"))
                                    {
                                        <button class="btn btn-sm btn-outline-info" @onclick="() => AbrirModalAsignarRol(usuario.UsuarioId,usuario.RoleId,usuario.Nombre + ' ' + usuario.Apellido)">
                                            <i class="bi bi-clipboard2-pulse-fill"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-outline-secondary" disabled>
                                            <i class="bi bi-ban"></i>
                                        </button>
                                    }

                                    @if (usuario.Activo)
                                    {
                                        <button class="btn btn-sm btn-outline-danger ms-1" @onclick="() => DesactivarUsuario(usuario)">
                                            <i class="bi bi-power"></i>
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-sm btn-outline-success ms-1" @onclick="() => DesactivarUsuario(usuario)">
                                            <i class="bi bi-check2-square"></i>
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="row">
                <div class="col-md-6">
                    <select class="form-select w-auto d-inline-block" 
                            @bind="pageSize" 
                            @bind:after="OnPageSizeChanged">
                        <option value="1">1 por página</option>
                        <option value="5">5 por página</option>
                        <option value="10">10 por página</option>
                        <option value="20">20 por página</option>
                        <option value="50">50 por página</option>
                    </select>
                    <span class="ms-2">
                        Mostrando @((pageNumber - 1) * pageSize + 1) a @Math.Min(pageNumber * pageSize, listaUsuario.Count()) de @totalCount registros
                    </span>
                </div>
                <div class="col-md-6 mt-3">
                    <nav class="float-end">
                        <ul class="pagination">
                            <li class="page-item @(!hasPreviousPages? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(1)">
                                    <i class="bi bi-chevron-double-left"></i>
                                </button>
                            </li>
                            <li class="page-item @(!hasPreviousPages ? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(pageNumber - 1)">
                                    <i class="bi bi-chevron-left"></i>
                                </button>
                            </li>
                            
                            @for (int i = Math.Max(1, pageNumber - 2); i <= Math.Min(totalPages, pageNumber + 2); i++)
                            {
                                int currentPage = i;
                                <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                                    <button class="page-link" @onclick="async () => await ChangePage(currentPage)">@i</button>
                                   
                                </li>
                            }

                            
                            <li class="page-item @(!hasNextPages ? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(pageNumber + 1)">
                                    <i class="bi bi-chevron-right"></i>
                                </button>
                            </li>
                            <li class="page-item @(!hasNextPages ? "disabled" : "")">
                                <button class="page-link" @onclick="async () => await ChangePage(totalPages)">
                                    <i class="bi bi-chevron-double-right"></i>
                                </button>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        }
    </div>
</div>
@if (mostrarModalAsignarRol)
{
    <ModalGeneric titulo="Asignar perfil a usuario" OnClose="() => mostrarModalAsignarRol = false">
        <EditForm Model="usuarioConvertModel" OnValidSubmit="ConvertirUsuario">
            <DataAnnotationsValidator/>
            <div class="mt-2">
                <label  for="RoleId" class="form-label">Rol</label>
                <InputSelect id="RoleId"  class="form-control" @bind-Value="usuarioConvertModel.RoleId" TValue="Guid">
                    <option value="@Guid.Empty">Seleccione un rol</option>
                    @foreach (var role in listaRoles)
                    {
                        <option value="@role.Id">@role.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => usuarioConvertModel.RoleId"/>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="() => mostrarModalAsignarRol = false">Cerrar</button>
                <button type="submit" class="btn btn-primary">Guardar</button>
            </div>
        </EditForm>
    </ModalGeneric>
}

@code {
    private List<UsuarioResponse> listaUsuario = new();
    public List<Role> listaRoles = new();
    public UsuarioConvertRequest usuarioConvertModel = new();
    private bool mostrarModalAsignarRol = false;
    public bool cargando { get; set; } = false;
    public string? isActive { get; set; }
    private string searchText = "";
    private string sort = "";
    private AuthResponse? usuarioActual = null;

    // Paginación
    private int pageNumber;
    private int pageSize = 10;
    private int totalPages = 1;
    private int totalCount = 0;
    private bool hasPreviousPages = false;
    private bool hasNextPages = false;

    protected override async Task OnInitializedAsync()
    {
        var authService = (AuthenticationService)auth;
        usuarioActual = await authService.GetUserActual();
        await CargarUsuarios();
        usuarioConvertModel.RoleId = Guid.Empty;
    }

    private async Task<List<Role>> ObtenerRoles()
    {
        var roles = await proxy.ObtenerRolesAsync();
        if (roles.IsSuccess)
            return roles.Data!;
        toastService.ShowError("Error al cargar roles: " + roles.Message);
        return new List<Role>();
    }

    private async Task CargarRoles(bool excluirActual = false, Guid? roleId = null)
    {
        var roles = await ObtenerRoles();
        if (excluirActual && roleId.HasValue)
            listaRoles = roles.Where(r => r.Id != roleId.Value).ToList();
        else
            listaRoles = roles;
    }

    private async Task OnPageSizeChanged()
    {
        pageNumber = 1;
        await CargarUsuarios();
    }

    private async Task LimpiarFiltros()
    {
        searchText = string.Empty;
        isActive = null;
        pageNumber = 1;
        await CargarUsuarios();
    }

    private void Regresar()
    {
        navigationManager.NavigateTo("/usuario/usuario");
    }
    private async Task EditarUsuario(string usuarioId)
    {
        cargando = true;
        SweetAlertResult resultSwal = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = $"¿Desea entrar a la edición del usuario ?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Si",
            CancelButtonText = "No"
        });   
        if (!string.IsNullOrEmpty(resultSwal.Value))
        {
            if (string.IsNullOrEmpty(usuarioId))
            {
                toastService.ShowError("ID de usuario no válido.");
                return;
            }
            navigationManager.NavigateTo($"/usuario/EditarUsuario/{usuarioId}");
        }
        cargando = false;

    }


    private async Task CargarUsuarios()
    {
        cargando = true;
        StateHasChanged();
        try
        {
            pageNumber = Math.Max(1, pageNumber);
            var resultPagination = await proxy.ObtenerPaginationUsuariosAsync(sort, pageNumber, pageSize, searchText, isActive);
            if (resultPagination.IsSuccess)
            {
                var dataOrdenado = resultPagination.Data?.OrderByDescending(u => u.RoleName).ToList() ?? new List<UsuarioResponse>();
                pageNumber = resultPagination.PageNumber;
                pageSize = resultPagination.PageSize;
                totalPages = resultPagination.TotalPages;
                hasPreviousPages = resultPagination.HasPreviousPages;
                hasNextPages = resultPagination.HasNextPages;
                listaUsuario = dataOrdenado!;
                totalCount = resultPagination.TotalCount;
            }
            else
            {
                listaUsuario.Clear();
                toastService.ShowWarning("No hay usuarios con esos parámetros", settings => settings.Position = ToastPosition.BottomRight);
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error al cargar usuarios: {ex.Message}");
        }
        finally
        {
            cargando = false;
            StateHasChanged();
        }
    }

    private async Task BuscarUsuarios()
    {
        pageNumber = 1;
        await CargarUsuarios();
    }

    private async Task ChangePage(int page)
    {
        if (cargando) return;
        cargando = true;
        try
        {
            pageNumber = page;
            await CargarUsuarios();
        }
        finally
        {
            cargando = false;
        }
    }

    private void NuevoUsuario()
    {
        navigationManager.NavigateTo("/usuario/AgregarUsuario");
    }

    private async Task AbrirModalAsignarRol(Guid usuarioId, Guid roleId, string? username = null)
    {
        usuarioConvertModel = new UsuarioConvertRequest
        {
            UsuarioId = usuarioId,
            Username = username,
            RoleId = Guid.Empty,
            UsuarioAccion = null,
        };
        await CargarRoles(excluirActual: true, roleId: roleId);
        mostrarModalAsignarRol = true;
    }

    public async Task ConvertirUsuario()
    {
        cargando = true;
        if (usuarioConvertModel.RoleId == Guid.Empty)
        {
            toastService.ShowError("Debe seleccionar un rol para el usuario.");
            cargando = false;
            return;
        }

        // Validar que no sea el mismo rol
        if (listaRoles.Any(r => r.Id == usuarioConvertModel.RoleId && r.Name == usuarioConvertModel.RoleName))
        {
            toastService.ShowError("El usuario ya tiene el rol seleccionado.");
            cargando = false;
            return;
        }
        usuarioConvertModel.RoleName = listaRoles.FirstOrDefault(r => r.Id == usuarioConvertModel.RoleId)?.Name;
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = $"¿Está seguro que desea asignar el rol: {usuarioConvertModel.RoleName}  al usuario {usuarioConvertModel.Username} ",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Si",
            CancelButtonText = "No"
        });

        if (!string.IsNullOrEmpty(result.Value))
        {
            var usuarioConvertRequest = new UsuarioConvertRequest()
            {
                RoleId = usuarioConvertModel.RoleId,
                UsuarioId = usuarioConvertModel.UsuarioId,
                UsuarioAccion = usuarioActual!.Id!.ToString()
            };

            var resultado = await proxy.ConvertUsuarioAsync(usuarioConvertRequest);
            if (resultado.IsSuccess)
            {
                mostrarModalAsignarRol = false;
                toastService.ShowSuccess("Usuario convertido correctamente");
                await CargarUsuarios();
                cargando = false;
                Regresar();
            }
            else
            {
                toastService.ShowError($"Error al convertir usuario: {resultado.Message}");
            }
            await CargarUsuarios();
        }
        cargando = false;
    }

    private async Task DesactivarUsuario(UsuarioResponse userResponse)
    {
        string estado = userResponse.Activo ? "desactivar" : "activar";
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = $"¿Está seguro que desea {estado} al usuario {userResponse.Nombre} {userResponse.Apellido}?",
            Icon = SweetAlertIcon.Question,
            ShowCancelButton = true,
            ConfirmButtonText = "Si",
            CancelButtonText = "No"
        });
        if (!string.IsNullOrEmpty(result.Value))
        {
            cargando = true;
            StateHasChanged();
            try
            {
                if (userResponse.UsuarioId == Guid.Empty)
                {
                    toastService.ShowError("Usuario incorrecto o no encontrado.");
                    return;
                }
                var authService = (AuthenticationService)auth;
                var usuarioActual = await authService.GetUserActual();
                var usuarioRequest = new UsuarioRequest
                {
                    UsuarioId = userResponse.UsuarioId,
                    Activo = userResponse.Activo ? false : true,
                    UsuarioAccion = usuarioActual.Id.ToString()
                };
                var response = await proxy.DisableUsuarioByIdAsync(usuarioRequest);
                if (!response.IsSuccess)
                {
                    toastService.ShowError($"Error al {estado} usuario: {response.Message}");
                }
                else
                {
                    toastService.ShowSuccess($"Éxito al {estado} usuario {userResponse.Nombre} {userResponse.Apellido}");
                    await CargarUsuarios();
                }
            }
            finally
            {
                cargando = false;
                StateHasChanged();
            }
        }
    }

    private async Task ExportarExcel()
    {
        cargando = true;
        try
        {
            toastService.ShowInfo("Exportando datos a Excel...");
            await Task.Delay(1000);
            toastService.ShowSuccess("Datos exportados correctamente");
        }
        catch (Exception ex)
        {
            toastService.ShowError($"Error al exportar: {ex.Message}");
        }
        finally
        {
            cargando = false;
        }
    }
}