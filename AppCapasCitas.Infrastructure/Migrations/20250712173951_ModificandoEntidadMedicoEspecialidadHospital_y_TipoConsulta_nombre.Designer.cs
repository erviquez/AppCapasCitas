// <auto-generated />
using System;
using AppCapasCitas.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppCapasCitas.Infrastructure.Migrations
{
    [DbContext(typeof(InfrastructureDbContext))]
    [Migration("20250712173951_ModificandoEntidadMedicoEspecialidadHospital_y_TipoConsulta_nombre")]
    partial class ModificandoEntidadMedicoEspecialidadHospital_y_TipoConsulta_nombre
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Aseguradora", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ciudad");

                    b.Property<string>("CodigoPostal")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("codigo_postal");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("direccion");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("observaciones");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("paciente_id");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pais");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("telefono");

                    b.HasKey("Id")
                        .HasName("pk_aseguradora");

                    b.HasIndex("PacienteId")
                        .HasDatabaseName("ix_aseguradora_paciente_id");

                    b.ToTable("aseguradora", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Cargo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("EsJefatura")
                        .HasColumnType("bit")
                        .HasColumnName("es_jefatura");

                    b.Property<Guid?>("EspecialidadId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("especialidad_id");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.Property<int>("NivelJerarquico")
                        .HasColumnType("int")
                        .HasColumnName("nivel_jerarquico");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_cargo");

                    b.HasIndex("EspecialidadId")
                        .HasDatabaseName("ix_cargo_especialidad_id");

                    b.ToTable("cargo", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Cita", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<Guid?>("ConsultorioId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("consultorio_id");

                    b.Property<decimal?>("CostoConsulta")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("costo_consulta");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<string>("Diagnostico")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("diagnostico");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_hora");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("medico_id");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("motivo");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notas");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("paciente_id");

                    b.Property<Guid?>("PagoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("pago_id");

                    b.Property<Guid?>("TipoConsultaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tipo_consulta_id");

                    b.Property<string>("Tratamiento")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tratamiento");

                    b.HasKey("Id")
                        .HasName("pk_cita");

                    b.HasIndex("ConsultorioId")
                        .HasDatabaseName("ix_cita_consultorio_id");

                    b.HasIndex("Estado")
                        .HasDatabaseName("ix_cita_estado");

                    b.HasIndex("FechaHora")
                        .HasDatabaseName("ix_cita_fecha_hora");

                    b.HasIndex("MedicoId")
                        .HasDatabaseName("ix_cita_medico_id");

                    b.HasIndex("PacienteId")
                        .HasDatabaseName("ix_cita_paciente_id");

                    b.HasIndex("TipoConsultaId")
                        .HasDatabaseName("ix_cita_tipo_consulta_id");

                    b.ToTable("cita", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Consultorio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<string>("Equipamiento")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("equipamiento");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("hospital_id");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("NumeroConsultorio")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("numero_consultorio");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("telefono");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ubicacion");

                    b.HasKey("Id")
                        .HasName("pk_consultorio");

                    b.HasIndex("HospitalId")
                        .HasDatabaseName("ix_consultorio_hospital_id");

                    b.ToTable("consultorio", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Contacto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("paciente_id");

                    b.Property<string>("Parentesco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("parentesco");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("telefono");

                    b.HasKey("Id")
                        .HasName("pk_contacto");

                    b.HasIndex("PacienteId")
                        .HasDatabaseName("ix_contacto_paciente_id");

                    b.ToTable("contacto", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Especialidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<decimal?>("CostoConsultaBase")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("costo_consulta_base");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_especialidad");

                    b.HasIndex("Activo")
                        .HasDatabaseName("IX_Especialidad_Activo");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("IX_Especialidad_Nombre");

                    b.ToTable("especialidad", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.HistorialMedico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<decimal>("Altura")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("altura");

                    b.Property<Guid>("CitaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cita_id");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("diagnostico");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("medico_id");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notas");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("paciente_id");

                    b.Property<decimal>("Peso")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("peso");

                    b.Property<string>("PresionArterial")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("presion_arterial");

                    b.Property<decimal>("Temperatura")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("temperatura");

                    b.Property<string>("Tratamiento")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("tratamiento");

                    b.HasKey("Id")
                        .HasName("pk_historial_medico");

                    b.HasIndex("CitaId")
                        .HasDatabaseName("ix_historial_medico_cita_id");

                    b.HasIndex("MedicoId")
                        .HasDatabaseName("ix_historial_medico_medico_id");

                    b.HasIndex("PacienteId")
                        .HasDatabaseName("ix_historial_medico_paciente_id");

                    b.ToTable("historial_medico", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.HorarioTrabajo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<int>("DiaSemana")
                        .HasColumnType("int")
                        .HasColumnName("dia_semana");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time")
                        .HasColumnName("hora_fin");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time")
                        .HasColumnName("hora_inicio");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("medico_id");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.HasKey("Id")
                        .HasName("pk_horario_trabajo");

                    b.HasIndex("MedicoId")
                        .HasDatabaseName("ix_horario_trabajo_medico_id");

                    b.ToTable("horario_trabajo", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Hospital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("CodigoPostal")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codigo_postal");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("direccion");

                    b.Property<string>("EmailContacto")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email_contacto");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("HorarioAtencion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("horario_atencion");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Municipio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("municipio");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("nombre");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pais");

                    b.Property<string>("ServiciosEspeciales")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("servicios_especiales");

                    b.Property<string>("SitioWeb")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("sitio_web");

                    b.Property<string>("TelefonoPrincipal")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("telefono_principal");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_hospital");

                    b.ToTable("hospital", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.MedicamentoRecetado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<string>("Dosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("dosis");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Frecuencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("frecuencia");

                    b.Property<string>("InstruccionesEspeciales")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("instrucciones_especiales");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("NombreMedicamento")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre_medicamento");

                    b.Property<Guid>("RecetaMedicaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("receta_medica_id");

                    b.HasKey("Id")
                        .HasName("pk_medicamento_recetado");

                    b.HasIndex("RecetaMedicaId")
                        .HasDatabaseName("ix_medicamento_recetado_receta_medica_id");

                    b.ToTable("medicamento_recetado", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Medico", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Biografia")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("biografia");

                    b.Property<string>("CedulaProfesional")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cedula_profesional");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Universidad")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("universidad");

                    b.HasKey("Id")
                        .HasName("pk_medico");

                    b.ToTable("medico", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.MedicoEspecialidadHospital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<Guid>("CargoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cargo_id");

                    b.Property<decimal?>("CostoConsultaEspecifico")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("costo_consulta_especifico");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<Guid>("EspecialidadId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("especialidad_id");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_fin");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_inicio");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("hospital_id");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("medico_id");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.HasKey("Id")
                        .HasName("pk_medico_especialidad_hospital");

                    b.HasIndex(new[] { "CargoId" }, "ix_medico_especialidad_hospital_cargo_id")
                        .HasDatabaseName("ix_medico_especialidad_hospital_cargo_id");

                    b.HasIndex(new[] { "EspecialidadId" }, "ix_medico_especialidad_hospital_especialidad_id")
                        .HasDatabaseName("ix_medico_especialidad_hospital_especialidad_id");

                    b.HasIndex(new[] { "HospitalId" }, "ix_medico_especialidad_hospital_hospital_id")
                        .HasDatabaseName("ix_medico_especialidad_hospital_hospital_id");

                    b.HasIndex(new[] { "MedicoId", "EspecialidadId", "HospitalId" }, "ix_medico_especialidad_hospital_medico_id_especialidad_id_hospital_id")
                        .IsUnique()
                        .HasDatabaseName("ix_medico_especialidad_hospital_medico_id_especialidad_id_hospital_id");

                    b.ToTable("medico_especialidad_hospital", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Alergias")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("alergias");

                    b.Property<string>("AntecedentesFamiliares")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("antecedentes_familiares");

                    b.Property<string>("AntecedentesPersonales")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("antecedentes_personales");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<string>("EnfermedadesCronicas")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("enfermedades_cronicas");

                    b.Property<string>("EstadoCivil")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("estado_civil");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("genero");

                    b.Property<string>("MedicamentosActuales")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("medicamentos_actuales");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("observaciones");

                    b.Property<string>("Ocupacion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ocupacion");

                    b.Property<Guid?>("TipoSangreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tipo_sangre_id");

                    b.HasKey("Id")
                        .HasName("pk_paciente");

                    b.HasIndex("TipoSangreId")
                        .HasDatabaseName("ix_paciente_tipo_sangre_id");

                    b.ToTable("paciente", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Pago", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<Guid?>("CitaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cita_id");

                    b.Property<string>("Comprobante")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comprobante");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_pago");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("metodo_pago");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("monto");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notas");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("paciente_id");

                    b.HasKey("Id")
                        .HasName("pk_pago");

                    b.HasIndex("CitaId")
                        .IsUnique()
                        .HasDatabaseName("ix_pago_cita_id")
                        .HasFilter("[cita_id] IS NOT NULL");

                    b.HasIndex("Estado")
                        .HasDatabaseName("ix_pago_estado");

                    b.HasIndex("PacienteId")
                        .HasDatabaseName("ix_pago_paciente_id");

                    b.ToTable("pago", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.RecetaMedica", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Adjuntos")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("adjuntos");

                    b.Property<Guid>("CitaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("cita_id");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<string>("DiagnosticoPrincipal")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("diagnostico_principal");

                    b.Property<string>("DiagnosticosSecundarios")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("diagnosticos_secundarios");

                    b.Property<string>("Estado")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_emision");

                    b.Property<DateTime?>("FechaVencimiento")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_vencimiento");

                    b.Property<string>("Instrucciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("instrucciones");

                    b.Property<Guid>("MedicoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("medico_id");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Motivo")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("motivo");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("observaciones");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("paciente_id");

                    b.HasKey("Id")
                        .HasName("pk_receta_medica");

                    b.HasIndex("CitaId")
                        .HasDatabaseName("ix_receta_medica_cita_id");

                    b.HasIndex("FechaEmision")
                        .HasDatabaseName("ix_receta_medica_fecha_emision");

                    b.HasIndex("MedicoId")
                        .HasDatabaseName("ix_receta_medica_medico_id");

                    b.HasIndex("PacienteId")
                        .HasDatabaseName("ix_receta_medica_paciente_id");

                    b.ToTable("receta_medica", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.TipoAccion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_tipo_accion");

                    b.ToTable("tipo_accion", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.TipoConsulta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("descripcion");

                    b.Property<int>("DuracionMinutos")
                        .HasColumnType("int")
                        .HasColumnName("duracion_minutos");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.Property<decimal>("MultiplicadorCosto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(4,2)")
                        .HasDefaultValue(1.0m)
                        .HasColumnName("multiplicador_costo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre");

                    b.HasKey("Id")
                        .HasName("pk_tipo_consulta");

                    b.ToTable("tipo_consulta", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.TipoSangre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Anticuerpos")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("anticuerpos");

                    b.Property<string>("Antigenos")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("antigenos");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("descripcion");

                    b.Property<string>("DonarA")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("donar_a");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("nombre");

                    b.Property<string>("RecibirDe")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("recibir_de");

                    b.HasKey("Id")
                        .HasName("pk_tipo_sangre");

                    b.HasIndex("Nombre")
                        .IsUnique()
                        .HasDatabaseName("ix_tipo_sangre_nombre");

                    b.ToTable("tipo_sangre", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("apellido");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("celular");

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ciudad");

                    b.Property<int>("CodigoPais")
                        .HasColumnType("int")
                        .HasColumnName("codigo_pais");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("direccion");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("estado");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Genero")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("genero");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nombre");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pais");

                    b.Property<string>("RolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("rol_name");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("telefono");

                    b.Property<DateTime?>("UltimoLogin")
                        .HasColumnType("datetime2")
                        .HasColumnName("ultimo_login");

                    b.HasKey("Id")
                        .HasName("pk_usuario");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_usuario_id");

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.UsuarioLogAccion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("CreadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("creado_por");

                    b.Property<DateTime?>("FechaActualizacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_actualizacion");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("ModificadoPor")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("modificado_por");

                    b.Property<Guid>("TipoAccionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tipo_accion_id");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id")
                        .HasName("pk_usuario_log_accion");

                    b.HasIndex("TipoAccionId")
                        .HasDatabaseName("ix_usuario_log_accion_tipo_accion_id");

                    b.HasIndex("UsuarioId")
                        .HasDatabaseName("ix_usuario_log_accion_usuario_id");

                    b.ToTable("usuario_log_accion", (string)null);
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Aseguradora", b =>
                {
                    b.HasOne("AppCapasCitas.Domain.Models.Paciente", "PacienteNavigation")
                        .WithMany("Aseguradoras")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_aseguradora_paciente_paciente_id");

                    b.Navigation("PacienteNavigation");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Cargo", b =>
                {
                    b.HasOne("AppCapasCitas.Domain.Models.Especialidad", "EspecialidadNavigation")
                        .WithMany()
                        .HasForeignKey("EspecialidadId")
                        .HasConstraintName("fk_cargo_especialidad_especialidad_id");

                    b.Navigation("EspecialidadNavigation");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Cita", b =>
                {
                    b.HasOne("AppCapasCitas.Domain.Models.Consultorio", "ConsultorioNavigation")
                        .WithMany("Citas")
                        .HasForeignKey("ConsultorioId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_cita_consultorio_consultorio_id");

                    b.HasOne("AppCapasCitas.Domain.Models.Medico", "MedicoNavigation")
                        .WithMany("Citas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cita_medico_medico_id");

                    b.HasOne("AppCapasCitas.Domain.Models.Paciente", "Paciente")
                        .WithMany("Citas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_cita_paciente_paciente_id");

                    b.HasOne("AppCapasCitas.Domain.Models.TipoConsulta", "TipoConsultaNavigation")
                        .WithMany("Citas")
                        .HasForeignKey("TipoConsultaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_cita_tipo_consulta_tipo_consulta_id");

                    b.Navigation("ConsultorioNavigation");

                    b.Navigation("MedicoNavigation");

                    b.Navigation("Paciente");

                    b.Navigation("TipoConsultaNavigation");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Consultorio", b =>
                {
                    b.HasOne("AppCapasCitas.Domain.Models.Hospital", "HospitalNavigation")
                        .WithMany("Consultorios")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_consultorio_hospital_hospital_id");

                    b.Navigation("HospitalNavigation");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Contacto", b =>
                {
                    b.HasOne("AppCapasCitas.Domain.Models.Paciente", "PacienteNavigation")
                        .WithMany("Contactos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contacto_paciente_paciente_id");

                    b.Navigation("PacienteNavigation");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.HistorialMedico", b =>
                {
                    b.HasOne("AppCapasCitas.Domain.Models.Cita", "CitaNavigation")
                        .WithMany()
                        .HasForeignKey("CitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_historial_medico_cita_cita_id");

                    b.HasOne("AppCapasCitas.Domain.Models.Medico", "MedicoNavigation")
                        .WithMany("HistorialMedicos")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_historial_medico_medico_medico_id");

                    b.HasOne("AppCapasCitas.Domain.Models.Paciente", "PacienteNavigation")
                        .WithMany("HistorialMedico")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_historial_medico_paciente_paciente_id");

                    b.Navigation("CitaNavigation");

                    b.Navigation("MedicoNavigation");

                    b.Navigation("PacienteNavigation");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.HorarioTrabajo", b =>
                {
                    b.HasOne("AppCapasCitas.Domain.Models.Medico", "MedicoNavigation")
                        .WithMany("HorariosTrabajo")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_horario_trabajo_medico_medico_id");

                    b.Navigation("MedicoNavigation");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.MedicamentoRecetado", b =>
                {
                    b.HasOne("AppCapasCitas.Domain.Models.RecetaMedica", "RecetaMedicaNavigation")
                        .WithMany("Medicamentos")
                        .HasForeignKey("RecetaMedicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medicamento_recetado_receta_medica_receta_medica_id");

                    b.Navigation("RecetaMedicaNavigation");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Medico", b =>
                {
                    b.HasOne("AppCapasCitas.Domain.Models.Usuario", "UsuarioNavigation")
                        .WithOne("MedicoNavigation")
                        .HasForeignKey("AppCapasCitas.Domain.Models.Medico", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_medico_usuario_id");

                    b.Navigation("UsuarioNavigation");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.MedicoEspecialidadHospital", b =>
                {
                    b.HasOne("AppCapasCitas.Domain.Models.Cargo", "CargoNavigation")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medico_especialidad_hospital_cargo_cargo_id");

                    b.HasOne("AppCapasCitas.Domain.Models.Especialidad", "EspecialidadNavigation")
                        .WithMany("MedicoEspecialidadHospitales")
                        .HasForeignKey("EspecialidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_medico_especialidad_hospital_especialidad_especialidad_id");

                    b.HasOne("AppCapasCitas.Domain.Models.Hospital", "HospitalNavigation")
                        .WithMany("MedicoEspecialidadHospitales")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_medico_especialidad_hospital_hospital_hospital_id");

                    b.HasOne("AppCapasCitas.Domain.Models.Medico", "MedicoNavigation")
                        .WithMany("MedicoEspecialidadHospitales")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_medico_especialidad_hospital_medico_medico_id");

                    b.Navigation("CargoNavigation");

                    b.Navigation("EspecialidadNavigation");

                    b.Navigation("HospitalNavigation");

                    b.Navigation("MedicoNavigation");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Paciente", b =>
                {
                    b.HasOne("AppCapasCitas.Domain.Models.Usuario", "UsuarioNavigation")
                        .WithOne("PacienteNavigation")
                        .HasForeignKey("AppCapasCitas.Domain.Models.Paciente", "Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_paciente_usuario_id");

                    b.HasOne("AppCapasCitas.Domain.Models.TipoSangre", "TipoSangreNavigation")
                        .WithMany("Pacientes")
                        .HasForeignKey("TipoSangreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_paciente_tipo_sangre_tipo_sangre_id");

                    b.Navigation("TipoSangreNavigation");

                    b.Navigation("UsuarioNavigation");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Pago", b =>
                {
                    b.HasOne("AppCapasCitas.Domain.Models.Cita", "CitaNavigation")
                        .WithOne("PagoNavigation")
                        .HasForeignKey("AppCapasCitas.Domain.Models.Pago", "CitaId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_pago_cita_cita_id");

                    b.HasOne("AppCapasCitas.Domain.Models.Paciente", "PacienteNavigation")
                        .WithMany("Pagos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_pago_paciente_paciente_id");

                    b.Navigation("CitaNavigation");

                    b.Navigation("PacienteNavigation");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.RecetaMedica", b =>
                {
                    b.HasOne("AppCapasCitas.Domain.Models.Cita", "CitaNavigation")
                        .WithMany("RecetasMedicas")
                        .HasForeignKey("CitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_receta_medica_cita_cita_id");

                    b.HasOne("AppCapasCitas.Domain.Models.Medico", "MedicoNavigation")
                        .WithMany("RecetasMedicas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_receta_medica_medico_medico_id");

                    b.HasOne("AppCapasCitas.Domain.Models.Paciente", "PacienteNavigation")
                        .WithMany("RecetasMedicas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_receta_medica_paciente_paciente_id");

                    b.Navigation("CitaNavigation");

                    b.Navigation("MedicoNavigation");

                    b.Navigation("PacienteNavigation");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.UsuarioLogAccion", b =>
                {
                    b.HasOne("AppCapasCitas.Domain.Models.TipoAccion", "TipoAccionNavigation")
                        .WithMany()
                        .HasForeignKey("TipoAccionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_usuario_log_accion_tipo_accion_tipo_accion_id");

                    b.HasOne("AppCapasCitas.Domain.Models.Usuario", "UsuarioNavigation")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_usuario_log_accion_usuario_usuario_id");

                    b.Navigation("TipoAccionNavigation");

                    b.Navigation("UsuarioNavigation");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Cita", b =>
                {
                    b.Navigation("PagoNavigation");

                    b.Navigation("RecetasMedicas");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Consultorio", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Especialidad", b =>
                {
                    b.Navigation("MedicoEspecialidadHospitales");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Hospital", b =>
                {
                    b.Navigation("Consultorios");

                    b.Navigation("MedicoEspecialidadHospitales");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Medico", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("HistorialMedicos");

                    b.Navigation("HorariosTrabajo");

                    b.Navigation("MedicoEspecialidadHospitales");

                    b.Navigation("RecetasMedicas");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Paciente", b =>
                {
                    b.Navigation("Aseguradoras");

                    b.Navigation("Citas");

                    b.Navigation("Contactos");

                    b.Navigation("HistorialMedico");

                    b.Navigation("Pagos");

                    b.Navigation("RecetasMedicas");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.RecetaMedica", b =>
                {
                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.TipoConsulta", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.TipoSangre", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("AppCapasCitas.Domain.Models.Usuario", b =>
                {
                    b.Navigation("MedicoNavigation");

                    b.Navigation("PacienteNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
